local protoc = require("pb.protoc")
local unfold = require("unfold")

local path_sep = (sys.get_sys_info().platform == "Windows" and "\\" or "/")

local function read(filename)
	local file = assert(io.open(filename, "rb"))
	local data = file:read("*a")
	file:close()
	return data
end

local function write(filename, data)
	local file = assert(io.open(filename, "wb"))
	assert(file:write(data))
	file:close()
end

local function mkdir(filename)
	-- Very hack-y workaround, will make a better solution
	local path = (filename:sub(1,1) == path_sep and path_sep or "")
	for i in filename:gmatch("([^" .. path_sep .. "]+)" .. path_sep .. "?") do
		path = path .. i .. path_sep
		
		lfs.mkdir(path)
	end
end

local function file_exists(filename)
	local exists = io.open(filename, "rb")
	if exists then io.close(exists) end
	return exists ~= nil
end

local function get_nodes(l)
	local nodes = {}
	for _,v in ipairs(l) do
		nodes[v] = gui.get_node(v)
	end
	return nodes
end

-- Adapted from https://github.com/subsoap/defglot/blob/master/defglot/defglot.lua#L67
local function autofit_text(node)
	local text_metrics = gui.get_text_metrics_from_node(node)
	local scale = math.min(1, gui.get_size(node).x / text_metrics.width)
	gui.set_scale(node, vmath.vector3(scale, scale, scale))
end

local function hex_to_v4(h)
	h = string.match(h, "%x%x%x%x%x%x")
	local r = tonumber(h:sub(1,2), 16)/255
	local g = tonumber(h:sub(3,4), 16)/255
	local b = tonumber(h:sub(5,6), 16)/255
	return vmath.vector4(r, g, b, 1)
end

local function button(self, id, normal_color, highlight_color, action_id, action, on_click)
	local node = gui.get_node(id)
	if action_id == hash("touch") then
		if action.pressed then
			if gui.pick_node(node, action.x, action.y) then
				on_click(self)
			end
		end
	elseif action_id == nil then
		if gui.pick_node(node, action.x, action.y) then
			gui.set_color(node, hex_to_v4(highlight_color))
		else
			gui.set_color(node, hex_to_v4(normal_color))
		end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", {color = vmath.vector4(0.07, 0.07, 0.07, 1)})

	self.nodes = get_nodes({"bundle_path_text", "output_path_text", "status"})
end

function on_input(self, action_id, action)
	button(self, "select_bundle", "#2b2b2b", "#212121", action_id, action, function(self)
		local code, path = diags.open_folder()
		if code == 1 then
			self.bundle_path = path
			gui.set_text(self.nodes.bundle_path_text, path)
			autofit_text(self.nodes.bundle_path_text)
		end
	end)
	button(self, "select_output", "#2b2b2b", "#212121", action_id, action, function(self)
		local code, path = diags.open_folder()
		if code == 1 then
			self.output_path = path
			gui.set_text(self.nodes.output_path_text, path)
			autofit_text(self.nodes.output_path_text)
		end
	end)
	button(self, "extract", "#0091ea", "#00b0ff", action_id, action, function(self)
		if not self.bundle_path then
			gui.set_color(self.nodes.status, hex_to_v4("#dd2c00"))
			gui.set_text(self.nodes.status, "You have to select a bundle folder!")
			return
		elseif not self.output_path then
			gui.set_color(self.nodes.status, hex_to_v4("#dd2c00"))
			gui.set_text(self.nodes.status, "You have to select an output folder!")
			return
		end
		gui.set_color(self.nodes.status, hex_to_v4("#ffffff"))
		gui.set_text(self.nodes.status, "")

		-- Remove ending slashes if they exist
		if self.bundle_path:sub(-1,-1) == path_sep then
			self.bundle_path = self.bundle_path:sub(1,-2)
		end
		if self.output_path:sub(-1,-1) == path_sep then
			self.output_path = self.output_path:sub(1,-2)
		end

		print("Bundle path: " .. self.bundle_path)
		print("Output path: " .. self.output_path)

		if not file_exists(self.bundle_path .. path_sep .. "game.arci") or
		not file_exists(self.bundle_path  .. path_sep .. "game.arcd") or
		not file_exists(self.bundle_path .. path_sep .. "game.dmanifest") then
			gui.set_color(self.nodes.status, hex_to_v4("#dd2c00"))
			gui.set_text(self.nodes.status, "Not a valid bundle folder!")
			return
		end

		local arc_data = read(self.bundle_path .. path_sep .. "game.arcd")

		gui.set_text(self.nodes.status, "Reading index...")
		local index = unfold.read_index(self.bundle_path .. path_sep .. "game.arci")

		gui.set_text(self.nodes.status, "Reading manifest...")
		local manifest = unfold.read_manifest(self.bundle_path .. path_sep .. "game.dmanifest")
		manifest = unfold.convert_hashes(manifest)

		gui.set_text(self.nodes.status, "Reading archive...")
		local entries = unfold.get_entries(arc_data, index, manifest)

		gui.set_text(self.nodes.status, "Writing to " .. self.output_path .. "...")
		for i,v in ipairs(entries) do
			if v.url then
				local url = self.output_path .. (sys.get_sys_info().platform == "Windows" and to_windows(v.url) or v.url)
				mkdir(unfold.enclosing_folder(url))
				write(url, v.data)
			end
		end

		gui.set_text(self.nodes.status, "Done! Written to " .. self.output_path)
	end)
end